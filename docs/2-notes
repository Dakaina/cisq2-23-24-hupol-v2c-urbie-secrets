Wat vinden wij:
User's password is being saved as plain text* encoded en salted nu*
No role based authorization checks at any controller method (so you can promote users to admins and the other way around while being a user)
Bij promoten/demoten van/naar admin wordt username doorgegeven via url inplaats van parameter
Alle soort input kan doorkomen, er is geen whitelist en validation.
Er is alleen 1 factor authentication
JWT token timeout duurt te lang, jwt token is nu 10 dagen geldig, refreshing jwt token misschien?
Alle type wachtwoorden worden toegelaten (zwakke, bekende, te weinig characters)*er is nu een requirement checker*
Verdachte login pogingen/belangrijke transacties worden niet gelogd
XML bestand voor import candidates/votes kan misbruikt worden wegens accepteren van untrusted xml files
Pom dependencies niet up to date *geupdate*
Geen entity java objecten sturen maar dto's
Ongebruikte dependencies op plekken.
Inlog check wachtwoord via equals methode*gefixt door PasswordEncoder matcher*
geen salting van wachtwoord*PasswordEncoder BCrypt gebruikt salting*
geen peppering van wachtwoord
application.properties bevat inlogdata voor database en meer
JWT secret basic
vaak this.secret = secret inplaats van alleen uit property file halen
er wordt geregistreerd op 2 punten (verschillend admin en user)
Hardcoded credentials zijn te makkelijk te raden


Wat vind snyk:
Update org.springframework.boot:spring-boot-starter-web van 3.2.3 naar 3.2.5 *
Update org.springframework.security:spring-security-test van 6.2.2 naar 6.2.3 *
Improper access control in org.springramework.security*verdwenen bij update van dependencies*
Remote code execution in com.h2database *niettefixen*
Use of hardcoded credentials in code (AuthenticationControllerWebTest line 44)
Use of hardcoded credentials in code (AuthenticationControllerWebTest line 45)
Use of hardcoded credentials in code (AuthenticationControllerWebTest line 62)
Use of hardcoded credentials in code (AuthenticationControllerWebTest line 63)
Use of hardcoded credentials in code (StartupRunner.java line 18)
Use of hardcoded credentials in code (StartupRunner.java line 19)
Use of password hash with insufficient computational effort (/fakedatagenerator/index.js line 13) *md5 naar sha256*
Unprotected storage of credentials (AuthenticationService.java line 26)*gefixt met encoder *
Request forgery (SecurityConfig.java line 50)*verdwenen*



